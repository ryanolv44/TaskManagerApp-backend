const { PrismaClient } = require('@prisma/client');
const { z } = require('zod');
const prisma = new PrismaClient();

const taskSchema = z.object({
  title: z.string(),
  completed: z.boolean().optional(),
  userId: z.number(),
});

exports.getTasks = async (req, res) => {
  const tasks = await prisma.task.findMany();
  res.json(tasks);
};

exports.createTask = async (req, res) => {
  try {
    const validatedData = taskSchema.parse(req.body);
    const newTask = await prisma.task.create({
      data: validatedData,
    });
    res.status(201).json(newTask);
  } catch (e) {
    res.status(400).json(e.errors);
  }
};

exports.updateTask = async (req, res) => {
  try {
    const validatedData = taskSchema.parse(req.body);
    const updatedTask = await prisma.task.update({
      where: { id: Number(req.params.id) },
      data: validatedData,
    });
    res.json(updatedTask);
  } catch (e) {
    res.status(400).json(e.errors);
  }
};

exports.deleteTask = async (req, res) => {
  const deletedTask = await prisma.task.delete({
    where: { id: Number(req.params.id) },
  });
  res.json(deletedTask);
};
