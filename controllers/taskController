const { PrismaClient } = require('@prisma/client');
const { z } = require('zod');
const prisma = new PrismaClient();

const taskSchema = z.object({
  title: z.string().min(1, { message: "O título é obrigatório" }),
  completed: z.boolean().optional(),
  userId: z.number().positive({ message: "ID de usuário inválido" }),
});

exports.getTasks = async (req, res) => {
  try {
    const tasks = await prisma.task.findMany();
    res.json(tasks);
  } catch (e) {
    res.status(500).json({ error: "Erro ao buscar tarefas" });
  }
};

exports.createTask = async (req, res) => {
  try {
    const validatedData = taskSchema.parse(req.body);
    
    // Verifica se o usuário existe
    const user = await prisma.user.findUnique({
      where: { id: validatedData.userId },
    });

    if (!user) {
      return res.status(400).json({ error: "Usuário não encontrado" });
    }

    const newTask = await prisma.task.create({
      data: validatedData,
    });
    res.status(201).json(newTask);
  } catch (e) {
    res.status(400).json(e.errors);
  }
};

exports.updateTask = async (req, res) => {
  try {
    const validatedData = taskSchema.parse(req.body);
    
    // Verifica se o usuário existe (apenas se userId estiver sendo atualizado)
    if (validatedData.userId) {
      const user = await prisma.user.findUnique({
        where: { id: validatedData.userId },
      });

      if (!user) {
        return res.status(400).json({ error: "Usuário não encontrado" });
      }
    }

    const updatedTask = await prisma.task.update({
      where: { id: Number(req.params.id) },
      data: validatedData,
    });
    res.json(updatedTask);
  } catch (e) {
    res.status(400).json(e.errors);
  }
};

exports.deleteTask = async (req, res) => {
  try {
    const deletedTask = await prisma.task.delete({
      where: { id: Number(req.params.id) },
    });
    res.json(deletedTask);
  } catch (e) {
    res.status(500).json({ error: "Erro ao deletar tarefa" });
  }
};
